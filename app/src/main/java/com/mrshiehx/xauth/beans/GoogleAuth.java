package com.mrshiehx.xauth.beans;
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google_auth.proto
// Protobuf Java Version: 4.26.0-rc1

import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.RuntimeVersion;
import com.google.protobuf.UninitializedMessageException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/*
 * 生成工具：https://github.com/protocolbuffers
 * 生成指令：protoc --java_out=. google_auth.proto
 * google_auth.proto：https://github.com/scito/extract_otp_secrets/blob/master/src/google_auth.proto
========================================
syntax = "proto3";

// Copied from: https://github.com/beemdevelopment/Aegis/blob/master/app/src/main/proto/google_auth.proto

message MigrationPayload {
  enum Algorithm {
    ALGO_INVALID = 0;
    ALGO_SHA1 = 1;
  }

  enum OtpType {
    OTP_INVALID = 0;
    OTP_HOTP = 1;
    OTP_TOTP = 2;
  }

  message OtpParameters {
    bytes secret = 1;
    string name = 2;
    string issuer = 3;
    Algorithm algorithm = 4;
    int32 digits = 5;
    OtpType type = 6;
    int64 counter = 7;
  }

  repeated OtpParameters otp_parameters = 1;
  int32 version = 2;
  int32 batch_size = 3;
  int32 batch_index = 4;
  int32 batch_id = 5;
}
========================================
*  */
public final class GoogleAuth {
    private GoogleAuth() {
    }

    static {
        RuntimeVersion.validateProtobufGencodeVersion(
                RuntimeVersion.RuntimeDomain.PUBLIC,
                /* major= */ 4,
                /* minor= */ 26,
                /* patch= */ 0,
                /* suffix= */ "-rc1",
                GoogleAuth.class.getName());
    }

    public static void registerAllExtensions(
            ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            ExtensionRegistry registry) {
        registerAllExtensions(
                (ExtensionRegistryLite) registry);
    }

    public interface MigrationPayloadOrBuilder extends
            // @@protoc_insertion_point(interface_extends:MigrationPayload)
            MessageOrBuilder {

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        List<MigrationPayload.OtpParameters>
        getOtpParametersList();

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        MigrationPayload.OtpParameters getOtpParameters(int index);

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        int getOtpParametersCount();

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        List<? extends MigrationPayload.OtpParametersOrBuilder>
        getOtpParametersOrBuilderList();

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        MigrationPayload.OtpParametersOrBuilder getOtpParametersOrBuilder(
                int index);

        /**
         * <code>int32 version = 2;</code>
         *
         * @return The version.
         */
        int getVersion();

        /**
         * <code>int32 batch_size = 3;</code>
         *
         * @return The batchSize.
         */
        int getBatchSize();

        /**
         * <code>int32 batch_index = 4;</code>
         *
         * @return The batchIndex.
         */
        int getBatchIndex();

        /**
         * <code>int32 batch_id = 5;</code>
         *
         * @return The batchId.
         */
        int getBatchId();
    }

    /**
     * Protobuf type {@code MigrationPayload}
     */
    public static final class MigrationPayload extends
            GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:MigrationPayload)
            MigrationPayloadOrBuilder {
        private static final long serialVersionUID = 0L;

        static {
            RuntimeVersion.validateProtobufGencodeVersion(
                    RuntimeVersion.RuntimeDomain.PUBLIC,
                    /* major= */ 4,
                    /* minor= */ 26,
                    /* patch= */ 0,
                    /* suffix= */ "-rc1",
                    MigrationPayload.class.getName());
        }

        // Use MigrationPayload.newBuilder() to construct.
        private MigrationPayload(GeneratedMessage.Builder<?> builder) {
            super(builder);
        }

        private MigrationPayload() {
            otpParameters_ = Collections.emptyList();
        }

        public static final Descriptors.Descriptor
        getDescriptor() {
            return GoogleAuth.internal_static_MigrationPayload_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return GoogleAuth.internal_static_MigrationPayload_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            MigrationPayload.class, Builder.class);
        }

        /**
         * Protobuf enum {@code MigrationPayload.Algorithm}
         */
        public enum Algorithm
                implements ProtocolMessageEnum {
            /**
             * <code>ALGO_INVALID = 0;</code>
             */
            ALGO_INVALID(0),
            /**
             * <code>ALGO_SHA1 = 1;</code>
             */
            ALGO_SHA1(1),
            UNRECOGNIZED(-1),
            ;

            static {
                RuntimeVersion.validateProtobufGencodeVersion(
                        RuntimeVersion.RuntimeDomain.PUBLIC,
                        /* major= */ 4,
                        /* minor= */ 26,
                        /* patch= */ 0,
                        /* suffix= */ "-rc1",
                        Algorithm.class.getName());
            }

            /**
             * <code>ALGO_INVALID = 0;</code>
             */
            public static final int ALGO_INVALID_VALUE = 0;
            /**
             * <code>ALGO_SHA1 = 1;</code>
             */
            public static final int ALGO_SHA1_VALUE = 1;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @param value The numeric wire value of the corresponding enum entry.
             * @return The enum associated with the given numeric wire value.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @Deprecated
            public static Algorithm valueOf(int value) {
                return forNumber(value);
            }

            /**
             * @param value The numeric wire value of the corresponding enum entry.
             * @return The enum associated with the given numeric wire value.
             */
            public static Algorithm forNumber(int value) {
                switch (value) {
                    case 0:
                        return ALGO_INVALID;
                    case 1:
                        return ALGO_SHA1;
                    default:
                        return null;
                }
            }

            public static Internal.EnumLiteMap<Algorithm>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static final Internal.EnumLiteMap<
                    Algorithm> internalValueMap =
                    new Internal.EnumLiteMap<Algorithm>() {
                        public Algorithm findValueByNumber(int number) {
                            return Algorithm.forNumber(number);
                        }
                    };

            public final Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalStateException(
                            "Can't get the descriptor of an unrecognized enum value.");
                }
                return getDescriptor().getValues().get(ordinal());
            }

            public final Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor
            getDescriptor() {
                return MigrationPayload.getDescriptor().getEnumTypes().get(0);
            }

            private static final Algorithm[] VALUES = values();

            public static Algorithm valueOf(
                    Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private Algorithm(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:MigrationPayload.Algorithm)
        }

        /**
         * Protobuf enum {@code MigrationPayload.OtpType}
         */
        public enum OtpType
                implements ProtocolMessageEnum {
            /**
             * <code>OTP_INVALID = 0;</code>
             */
            OTP_INVALID(0),
            /**
             * <code>OTP_HOTP = 1;</code>
             */
            OTP_HOTP(1),
            /**
             * <code>OTP_TOTP = 2;</code>
             */
            OTP_TOTP(2),
            UNRECOGNIZED(-1),
            ;

            static {
                RuntimeVersion.validateProtobufGencodeVersion(
                        RuntimeVersion.RuntimeDomain.PUBLIC,
                        /* major= */ 4,
                        /* minor= */ 26,
                        /* patch= */ 0,
                        /* suffix= */ "-rc1",
                        OtpType.class.getName());
            }

            /**
             * <code>OTP_INVALID = 0;</code>
             */
            public static final int OTP_INVALID_VALUE = 0;
            /**
             * <code>OTP_HOTP = 1;</code>
             */
            public static final int OTP_HOTP_VALUE = 1;
            /**
             * <code>OTP_TOTP = 2;</code>
             */
            public static final int OTP_TOTP_VALUE = 2;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @param value The numeric wire value of the corresponding enum entry.
             * @return The enum associated with the given numeric wire value.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @Deprecated
            public static OtpType valueOf(int value) {
                return forNumber(value);
            }

            /**
             * @param value The numeric wire value of the corresponding enum entry.
             * @return The enum associated with the given numeric wire value.
             */
            public static OtpType forNumber(int value) {
                switch (value) {
                    case 0:
                        return OTP_INVALID;
                    case 1:
                        return OTP_HOTP;
                    case 2:
                        return OTP_TOTP;
                    default:
                        return null;
                }
            }

            public static Internal.EnumLiteMap<OtpType>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static final Internal.EnumLiteMap<
                    OtpType> internalValueMap =
                    new Internal.EnumLiteMap<OtpType>() {
                        public OtpType findValueByNumber(int number) {
                            return OtpType.forNumber(number);
                        }
                    };

            public final Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalStateException(
                            "Can't get the descriptor of an unrecognized enum value.");
                }
                return getDescriptor().getValues().get(ordinal());
            }

            public final Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor
            getDescriptor() {
                return MigrationPayload.getDescriptor().getEnumTypes().get(1);
            }

            private static final OtpType[] VALUES = values();

            public static OtpType valueOf(
                    Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private OtpType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:MigrationPayload.OtpType)
        }

        public interface OtpParametersOrBuilder extends
                // @@protoc_insertion_point(interface_extends:MigrationPayload.OtpParameters)
                MessageOrBuilder {

            /**
             * <code>bytes secret = 1;</code>
             *
             * @return The secret.
             */
            ByteString getSecret();

            /**
             * <code>string name = 2;</code>
             *
             * @return The name.
             */
            String getName();

            /**
             * <code>string name = 2;</code>
             *
             * @return The bytes for name.
             */
            ByteString
            getNameBytes();

            /**
             * <code>string issuer = 3;</code>
             *
             * @return The issuer.
             */
            String getIssuer();

            /**
             * <code>string issuer = 3;</code>
             *
             * @return The bytes for issuer.
             */
            ByteString
            getIssuerBytes();

            /**
             * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
             *
             * @return The enum numeric value on the wire for algorithm.
             */
            int getAlgorithmValue();

            /**
             * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
             *
             * @return The algorithm.
             */
            Algorithm getAlgorithm();

            /**
             * <code>int32 digits = 5;</code>
             *
             * @return The digits.
             */
            int getDigits();

            /**
             * <code>.MigrationPayload.OtpType type = 6;</code>
             *
             * @return The enum numeric value on the wire for type.
             */
            int getTypeValue();

            /**
             * <code>.MigrationPayload.OtpType type = 6;</code>
             *
             * @return The type.
             */
            OtpType getType();

            /**
             * <code>int64 counter = 7;</code>
             *
             * @return The counter.
             */
            long getCounter();
        }

        /**
         * Protobuf type {@code MigrationPayload.OtpParameters}
         */
        public static final class OtpParameters extends
                GeneratedMessage implements
                // @@protoc_insertion_point(message_implements:MigrationPayload.OtpParameters)
                OtpParametersOrBuilder {
            private static final long serialVersionUID = 0L;

            static {
                RuntimeVersion.validateProtobufGencodeVersion(
                        RuntimeVersion.RuntimeDomain.PUBLIC,
                        /* major= */ 4,
                        /* minor= */ 26,
                        /* patch= */ 0,
                        /* suffix= */ "-rc1",
                        OtpParameters.class.getName());
            }

            // Use OtpParameters.newBuilder() to construct.
            private OtpParameters(GeneratedMessage.Builder<?> builder) {
                super(builder);
            }

            private OtpParameters() {
                secret_ = ByteString.EMPTY;
                name_ = "";
                issuer_ = "";
                algorithm_ = 0;
                type_ = 0;
            }

            public static final Descriptors.Descriptor
            getDescriptor() {
                return GoogleAuth.internal_static_MigrationPayload_OtpParameters_descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return GoogleAuth.internal_static_MigrationPayload_OtpParameters_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                OtpParameters.class, Builder.class);
            }

            public static final int SECRET_FIELD_NUMBER = 1;
            private ByteString secret_ = ByteString.EMPTY;

            /**
             * <code>bytes secret = 1;</code>
             *
             * @return The secret.
             */
            @Override
            public ByteString getSecret() {
                return secret_;
            }

            public static final int NAME_FIELD_NUMBER = 2;
            @SuppressWarnings("serial")
            private volatile Object name_ = "";

            /**
             * <code>string name = 2;</code>
             *
             * @return The name.
             */
            @Override
            public String getName() {
                Object ref = name_;
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    ByteString bs =
                            (ByteString) ref;
                    String s = bs.toStringUtf8();
                    name_ = s;
                    return s;
                }
            }

            /**
             * <code>string name = 2;</code>
             *
             * @return The bytes for name.
             */
            @Override
            public ByteString
            getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            public static final int ISSUER_FIELD_NUMBER = 3;
            @SuppressWarnings("serial")
            private volatile Object issuer_ = "";

            /**
             * <code>string issuer = 3;</code>
             *
             * @return The issuer.
             */
            @Override
            public String getIssuer() {
                Object ref = issuer_;
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    ByteString bs =
                            (ByteString) ref;
                    String s = bs.toStringUtf8();
                    issuer_ = s;
                    return s;
                }
            }

            /**
             * <code>string issuer = 3;</code>
             *
             * @return The bytes for issuer.
             */
            @Override
            public ByteString
            getIssuerBytes() {
                Object ref = issuer_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (String) ref);
                    issuer_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            public static final int ALGORITHM_FIELD_NUMBER = 4;
            private int algorithm_ = 0;

            /**
             * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
             *
             * @return The enum numeric value on the wire for algorithm.
             */
            @Override
            public int getAlgorithmValue() {
                return algorithm_;
            }

            /**
             * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
             *
             * @return The algorithm.
             */
            @Override
            public Algorithm getAlgorithm() {
                Algorithm result = Algorithm.forNumber(algorithm_);
                return result == null ? Algorithm.UNRECOGNIZED : result;
            }

            public static final int DIGITS_FIELD_NUMBER = 5;
            private int digits_ = 0;

            /**
             * <code>int32 digits = 5;</code>
             *
             * @return The digits.
             */
            @Override
            public int getDigits() {
                return digits_;
            }

            public static final int TYPE_FIELD_NUMBER = 6;
            private int type_ = 0;

            /**
             * <code>.MigrationPayload.OtpType type = 6;</code>
             *
             * @return The enum numeric value on the wire for type.
             */
            @Override
            public int getTypeValue() {
                return type_;
            }

            /**
             * <code>.MigrationPayload.OtpType type = 6;</code>
             *
             * @return The type.
             */
            @Override
            public OtpType getType() {
                OtpType result = OtpType.forNumber(type_);
                return result == null ? OtpType.UNRECOGNIZED : result;
            }

            public static final int COUNTER_FIELD_NUMBER = 7;
            private long counter_ = 0L;

            /**
             * <code>int64 counter = 7;</code>
             *
             * @return The counter.
             */
            @Override
            public long getCounter() {
                return counter_;
            }

            private byte memoizedIsInitialized = -1;

            @Override
            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            @Override
            public void writeTo(CodedOutputStream output)
                    throws java.io.IOException {
                if (!secret_.isEmpty()) {
                    output.writeBytes(1, secret_);
                }
                if (!GeneratedMessage.isStringEmpty(name_)) {
                    GeneratedMessage.writeString(output, 2, name_);
                }
                if (!GeneratedMessage.isStringEmpty(issuer_)) {
                    GeneratedMessage.writeString(output, 3, issuer_);
                }
                if (algorithm_ != Algorithm.ALGO_INVALID.getNumber()) {
                    output.writeEnum(4, algorithm_);
                }
                if (digits_ != 0) {
                    output.writeInt32(5, digits_);
                }
                if (type_ != OtpType.OTP_INVALID.getNumber()) {
                    output.writeEnum(6, type_);
                }
                if (counter_ != 0L) {
                    output.writeInt64(7, counter_);
                }
                getUnknownFields().writeTo(output);
            }

            @Override
            public int getSerializedSize() {
                int size = memoizedSize;
                if (size != -1) return size;

                size = 0;
                if (!secret_.isEmpty()) {
                    size += CodedOutputStream
                            .computeBytesSize(1, secret_);
                }
                if (!GeneratedMessage.isStringEmpty(name_)) {
                    size += GeneratedMessage.computeStringSize(2, name_);
                }
                if (!GeneratedMessage.isStringEmpty(issuer_)) {
                    size += GeneratedMessage.computeStringSize(3, issuer_);
                }
                if (algorithm_ != Algorithm.ALGO_INVALID.getNumber()) {
                    size += CodedOutputStream
                            .computeEnumSize(4, algorithm_);
                }
                if (digits_ != 0) {
                    size += CodedOutputStream
                            .computeInt32Size(5, digits_);
                }
                if (type_ != OtpType.OTP_INVALID.getNumber()) {
                    size += CodedOutputStream
                            .computeEnumSize(6, type_);
                }
                if (counter_ != 0L) {
                    size += CodedOutputStream
                            .computeInt64Size(7, counter_);
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSize = size;
                return size;
            }

            @Override
            public boolean equals(final Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof OtpParameters)) {
                    return super.equals(obj);
                }
                OtpParameters other = (OtpParameters) obj;

                if (!getSecret()
                        .equals(other.getSecret())) return false;
                if (!getName()
                        .equals(other.getName())) return false;
                if (!getIssuer()
                        .equals(other.getIssuer())) return false;
                if (algorithm_ != other.algorithm_) return false;
                if (getDigits()
                        != other.getDigits()) return false;
                if (type_ != other.type_) return false;
                if (getCounter()
                        != other.getCounter()) return false;
                if (!getUnknownFields().equals(other.getUnknownFields())) return false;
                return true;
            }

            @Override
            public int hashCode() {
                if (memoizedHashCode != 0) {
                    return memoizedHashCode;
                }
                int hash = 41;
                hash = (19 * hash) + getDescriptor().hashCode();
                hash = (37 * hash) + SECRET_FIELD_NUMBER;
                hash = (53 * hash) + getSecret().hashCode();
                hash = (37 * hash) + NAME_FIELD_NUMBER;
                hash = (53 * hash) + getName().hashCode();
                hash = (37 * hash) + ISSUER_FIELD_NUMBER;
                hash = (53 * hash) + getIssuer().hashCode();
                hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
                hash = (53 * hash) + algorithm_;
                hash = (37 * hash) + DIGITS_FIELD_NUMBER;
                hash = (53 * hash) + getDigits();
                hash = (37 * hash) + TYPE_FIELD_NUMBER;
                hash = (53 * hash) + type_;
                hash = (37 * hash) + COUNTER_FIELD_NUMBER;
                hash = (53 * hash) + Internal.hashLong(
                        getCounter());
                hash = (29 * hash) + getUnknownFields().hashCode();
                memoizedHashCode = hash;
                return hash;
            }

            public static OtpParameters parseFrom(
                    java.nio.ByteBuffer data)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static OtpParameters parseFrom(
                    java.nio.ByteBuffer data,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static OtpParameters parseFrom(
                    ByteString data)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static OtpParameters parseFrom(
                    ByteString data,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static OtpParameters parseFrom(byte[] data)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static OtpParameters parseFrom(
                    byte[] data,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static OtpParameters parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseWithIOException(PARSER, input);
            }

            public static OtpParameters parseFrom(
                    java.io.InputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public static OtpParameters parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseDelimitedWithIOException(PARSER, input);
            }

            public static OtpParameters parseDelimitedFrom(
                    java.io.InputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
            }

            public static OtpParameters parseFrom(
                    CodedInputStream input)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseWithIOException(PARSER, input);
            }

            public static OtpParameters parseFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return GeneratedMessage
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(OtpParameters prototype) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE
                        ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            protected Builder newBuilderForType(
                    BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code MigrationPayload.OtpParameters}
             */
            public static final class Builder extends
                    GeneratedMessage.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:MigrationPayload.OtpParameters)
                    OtpParametersOrBuilder {
                public static final Descriptors.Descriptor
                getDescriptor() {
                    return GoogleAuth.internal_static_MigrationPayload_OtpParameters_descriptor;
                }

                @Override
                protected FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return GoogleAuth.internal_static_MigrationPayload_OtpParameters_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    OtpParameters.class, Builder.class);
                }

                // Construct using auth.GoogleAuth.MigrationPayload.OtpParameters.newBuilder()
                private Builder() {

                }

                private Builder(
                        BuilderParent parent) {
                    super(parent);

                }

                @Override
                public Builder clear() {
                    super.clear();
                    bitField0_ = 0;
                    secret_ = ByteString.EMPTY;
                    name_ = "";
                    issuer_ = "";
                    algorithm_ = 0;
                    digits_ = 0;
                    type_ = 0;
                    counter_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor
                getDescriptorForType() {
                    return GoogleAuth.internal_static_MigrationPayload_OtpParameters_descriptor;
                }

                @Override
                public OtpParameters getDefaultInstanceForType() {
                    return OtpParameters.getDefaultInstance();
                }

                @Override
                public OtpParameters build() {
                    OtpParameters result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                @Override
                public OtpParameters buildPartial() {
                    OtpParameters result = new OtpParameters(this);
                    if (bitField0_ != 0) {
                        buildPartial0(result);
                    }
                    onBuilt();
                    return result;
                }

                private void buildPartial0(OtpParameters result) {
                    int from_bitField0_ = bitField0_;
                    if (((from_bitField0_ & 0x00000001) != 0)) {
                        result.secret_ = secret_;
                    }
                    if (((from_bitField0_ & 0x00000002) != 0)) {
                        result.name_ = name_;
                    }
                    if (((from_bitField0_ & 0x00000004) != 0)) {
                        result.issuer_ = issuer_;
                    }
                    if (((from_bitField0_ & 0x00000008) != 0)) {
                        result.algorithm_ = algorithm_;
                    }
                    if (((from_bitField0_ & 0x00000010) != 0)) {
                        result.digits_ = digits_;
                    }
                    if (((from_bitField0_ & 0x00000020) != 0)) {
                        result.type_ = type_;
                    }
                    if (((from_bitField0_ & 0x00000040) != 0)) {
                        result.counter_ = counter_;
                    }
                }

                @Override
                public Builder mergeFrom(Message other) {
                    if (other instanceof OtpParameters) {
                        return mergeFrom((OtpParameters) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(OtpParameters other) {
                    if (other == OtpParameters.getDefaultInstance()) return this;
                    if (other.getSecret() != ByteString.EMPTY) {
                        setSecret(other.getSecret());
                    }
                    if (!other.getName().isEmpty()) {
                        name_ = other.name_;
                        bitField0_ |= 0x00000002;
                        onChanged();
                    }
                    if (!other.getIssuer().isEmpty()) {
                        issuer_ = other.issuer_;
                        bitField0_ |= 0x00000004;
                        onChanged();
                    }
                    if (other.algorithm_ != 0) {
                        setAlgorithmValue(other.getAlgorithmValue());
                    }
                    if (other.getDigits() != 0) {
                        setDigits(other.getDigits());
                    }
                    if (other.type_ != 0) {
                        setTypeValue(other.getTypeValue());
                    }
                    if (other.getCounter() != 0L) {
                        setCounter(other.getCounter());
                    }
                    this.mergeUnknownFields(other.getUnknownFields());
                    onChanged();
                    return this;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public Builder mergeFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    if (extensionRegistry == null) {
                        throw new NullPointerException();
                    }
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                case 10: {
                                    secret_ = input.readBytes();
                                    bitField0_ |= 0x00000001;
                                    break;
                                } // case 10
                                case 18: {
                                    name_ = input.readStringRequireUtf8();
                                    bitField0_ |= 0x00000002;
                                    break;
                                } // case 18
                                case 26: {
                                    issuer_ = input.readStringRequireUtf8();
                                    bitField0_ |= 0x00000004;
                                    break;
                                } // case 26
                                case 32: {
                                    algorithm_ = input.readEnum();
                                    bitField0_ |= 0x00000008;
                                    break;
                                } // case 32
                                case 40: {
                                    digits_ = input.readInt32();
                                    bitField0_ |= 0x00000010;
                                    break;
                                } // case 40
                                case 48: {
                                    type_ = input.readEnum();
                                    bitField0_ |= 0x00000020;
                                    break;
                                } // case 48
                                case 56: {
                                    counter_ = input.readInt64();
                                    bitField0_ |= 0x00000040;
                                    break;
                                } // case 56
                                default: {
                                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                                        done = true; // was an endgroup tag
                                    }
                                    break;
                                } // default:
                            } // switch (tag)
                        } // while (!done)
                    } catch (InvalidProtocolBufferException e) {
                        throw e.unwrapIOException();
                    } finally {
                        onChanged();
                    } // finally
                    return this;
                }

                private int bitField0_;

                private ByteString secret_ = ByteString.EMPTY;

                /**
                 * <code>bytes secret = 1;</code>
                 *
                 * @return The secret.
                 */
                @Override
                public ByteString getSecret() {
                    return secret_;
                }

                /**
                 * <code>bytes secret = 1;</code>
                 *
                 * @param value The secret to set.
                 * @return This builder for chaining.
                 */
                public Builder setSecret(ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    secret_ = value;
                    bitField0_ |= 0x00000001;
                    onChanged();
                    return this;
                }

                /**
                 * <code>bytes secret = 1;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearSecret() {
                    bitField0_ = (bitField0_ & ~0x00000001);
                    secret_ = getDefaultInstance().getSecret();
                    onChanged();
                    return this;
                }

                private Object name_ = "";

                /**
                 * <code>string name = 2;</code>
                 *
                 * @return The name.
                 */
                public String getName() {
                    Object ref = name_;
                    if (!(ref instanceof String)) {
                        ByteString bs =
                                (ByteString) ref;
                        String s = bs.toStringUtf8();
                        name_ = s;
                        return s;
                    } else {
                        return (String) ref;
                    }
                }

                /**
                 * <code>string name = 2;</code>
                 *
                 * @return The bytes for name.
                 */
                public ByteString
                getNameBytes() {
                    Object ref = name_;
                    if (ref instanceof String) {
                        ByteString b =
                                ByteString.copyFromUtf8(
                                        (String) ref);
                        name_ = b;
                        return b;
                    } else {
                        return (ByteString) ref;
                    }
                }

                /**
                 * <code>string name = 2;</code>
                 *
                 * @param value The name to set.
                 * @return This builder for chaining.
                 */
                public Builder setName(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    name_ = value;
                    bitField0_ |= 0x00000002;
                    onChanged();
                    return this;
                }

                /**
                 * <code>string name = 2;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearName() {
                    name_ = getDefaultInstance().getName();
                    bitField0_ = (bitField0_ & ~0x00000002);
                    onChanged();
                    return this;
                }

                /**
                 * <code>string name = 2;</code>
                 *
                 * @param value The bytes for name to set.
                 * @return This builder for chaining.
                 */
                public Builder setNameBytes(
                        ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);
                    name_ = value;
                    bitField0_ |= 0x00000002;
                    onChanged();
                    return this;
                }

                private Object issuer_ = "";

                /**
                 * <code>string issuer = 3;</code>
                 *
                 * @return The issuer.
                 */
                public String getIssuer() {
                    Object ref = issuer_;
                    if (!(ref instanceof String)) {
                        ByteString bs =
                                (ByteString) ref;
                        String s = bs.toStringUtf8();
                        issuer_ = s;
                        return s;
                    } else {
                        return (String) ref;
                    }
                }

                /**
                 * <code>string issuer = 3;</code>
                 *
                 * @return The bytes for issuer.
                 */
                public ByteString
                getIssuerBytes() {
                    Object ref = issuer_;
                    if (ref instanceof String) {
                        ByteString b =
                                ByteString.copyFromUtf8(
                                        (String) ref);
                        issuer_ = b;
                        return b;
                    } else {
                        return (ByteString) ref;
                    }
                }

                /**
                 * <code>string issuer = 3;</code>
                 *
                 * @param value The issuer to set.
                 * @return This builder for chaining.
                 */
                public Builder setIssuer(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    issuer_ = value;
                    bitField0_ |= 0x00000004;
                    onChanged();
                    return this;
                }

                /**
                 * <code>string issuer = 3;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearIssuer() {
                    issuer_ = getDefaultInstance().getIssuer();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                    return this;
                }

                /**
                 * <code>string issuer = 3;</code>
                 *
                 * @param value The bytes for issuer to set.
                 * @return This builder for chaining.
                 */
                public Builder setIssuerBytes(
                        ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);
                    issuer_ = value;
                    bitField0_ |= 0x00000004;
                    onChanged();
                    return this;
                }

                private int algorithm_ = 0;

                /**
                 * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
                 *
                 * @return The enum numeric value on the wire for algorithm.
                 */
                @Override
                public int getAlgorithmValue() {
                    return algorithm_;
                }

                /**
                 * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
                 *
                 * @param value The enum numeric value on the wire for algorithm to set.
                 * @return This builder for chaining.
                 */
                public Builder setAlgorithmValue(int value) {
                    algorithm_ = value;
                    bitField0_ |= 0x00000008;
                    onChanged();
                    return this;
                }

                /**
                 * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
                 *
                 * @return The algorithm.
                 */
                @Override
                public Algorithm getAlgorithm() {
                    Algorithm result = Algorithm.forNumber(algorithm_);
                    return result == null ? Algorithm.UNRECOGNIZED : result;
                }

                /**
                 * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
                 *
                 * @param value The algorithm to set.
                 * @return This builder for chaining.
                 */
                public Builder setAlgorithm(Algorithm value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    bitField0_ |= 0x00000008;
                    algorithm_ = value.getNumber();
                    onChanged();
                    return this;
                }

                /**
                 * <code>.MigrationPayload.Algorithm algorithm = 4;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearAlgorithm() {
                    bitField0_ = (bitField0_ & ~0x00000008);
                    algorithm_ = 0;
                    onChanged();
                    return this;
                }

                private int digits_;

                /**
                 * <code>int32 digits = 5;</code>
                 *
                 * @return The digits.
                 */
                @Override
                public int getDigits() {
                    return digits_;
                }

                /**
                 * <code>int32 digits = 5;</code>
                 *
                 * @param value The digits to set.
                 * @return This builder for chaining.
                 */
                public Builder setDigits(int value) {

                    digits_ = value;
                    bitField0_ |= 0x00000010;
                    onChanged();
                    return this;
                }

                /**
                 * <code>int32 digits = 5;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearDigits() {
                    bitField0_ = (bitField0_ & ~0x00000010);
                    digits_ = 0;
                    onChanged();
                    return this;
                }

                private int type_ = 0;

                /**
                 * <code>.MigrationPayload.OtpType type = 6;</code>
                 *
                 * @return The enum numeric value on the wire for type.
                 */
                @Override
                public int getTypeValue() {
                    return type_;
                }

                /**
                 * <code>.MigrationPayload.OtpType type = 6;</code>
                 *
                 * @param value The enum numeric value on the wire for type to set.
                 * @return This builder for chaining.
                 */
                public Builder setTypeValue(int value) {
                    type_ = value;
                    bitField0_ |= 0x00000020;
                    onChanged();
                    return this;
                }

                /**
                 * <code>.MigrationPayload.OtpType type = 6;</code>
                 *
                 * @return The type.
                 */
                @Override
                public OtpType getType() {
                    OtpType result = OtpType.forNumber(type_);
                    return result == null ? OtpType.UNRECOGNIZED : result;
                }

                /**
                 * <code>.MigrationPayload.OtpType type = 6;</code>
                 *
                 * @param value The type to set.
                 * @return This builder for chaining.
                 */
                public Builder setType(OtpType value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    bitField0_ |= 0x00000020;
                    type_ = value.getNumber();
                    onChanged();
                    return this;
                }

                /**
                 * <code>.MigrationPayload.OtpType type = 6;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearType() {
                    bitField0_ = (bitField0_ & ~0x00000020);
                    type_ = 0;
                    onChanged();
                    return this;
                }

                private long counter_;

                /**
                 * <code>int64 counter = 7;</code>
                 *
                 * @return The counter.
                 */
                @Override
                public long getCounter() {
                    return counter_;
                }

                /**
                 * <code>int64 counter = 7;</code>
                 *
                 * @param value The counter to set.
                 * @return This builder for chaining.
                 */
                public Builder setCounter(long value) {

                    counter_ = value;
                    bitField0_ |= 0x00000040;
                    onChanged();
                    return this;
                }

                /**
                 * <code>int64 counter = 7;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearCounter() {
                    bitField0_ = (bitField0_ & ~0x00000040);
                    counter_ = 0L;
                    onChanged();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:MigrationPayload.OtpParameters)
            }

            // @@protoc_insertion_point(class_scope:MigrationPayload.OtpParameters)
            private static final OtpParameters DEFAULT_INSTANCE;

            static {
                DEFAULT_INSTANCE = new OtpParameters();
            }

            public static OtpParameters getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static final Parser<OtpParameters>
                    PARSER = new AbstractParser<OtpParameters>() {
                @Override
                public OtpParameters parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    Builder builder = newBuilder();
                    try {
                        builder.mergeFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(builder.buildPartial());
                    } catch (UninitializedMessageException e) {
                        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
                    } catch (java.io.IOException e) {
                        throw new InvalidProtocolBufferException(e)
                                .setUnfinishedMessage(builder.buildPartial());
                    }
                    return builder.buildPartial();
                }
            };

            public static Parser<OtpParameters> parser() {
                return PARSER;
            }

            @Override
            public Parser<OtpParameters> getParserForType() {
                return PARSER;
            }

            @Override
            public OtpParameters getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

        }

        public static final int OTP_PARAMETERS_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private List<OtpParameters> otpParameters_;

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        @Override
        public List<OtpParameters> getOtpParametersList() {
            return otpParameters_;
        }

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        @Override
        public List<? extends OtpParametersOrBuilder>
        getOtpParametersOrBuilderList() {
            return otpParameters_;
        }

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        @Override
        public int getOtpParametersCount() {
            return otpParameters_.size();
        }

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        @Override
        public OtpParameters getOtpParameters(int index) {
            return otpParameters_.get(index);
        }

        /**
         * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
         */
        @Override
        public OtpParametersOrBuilder getOtpParametersOrBuilder(
                int index) {
            return otpParameters_.get(index);
        }

        public static final int VERSION_FIELD_NUMBER = 2;
        private int version_ = 0;

        /**
         * <code>int32 version = 2;</code>
         *
         * @return The version.
         */
        @Override
        public int getVersion() {
            return version_;
        }

        public static final int BATCH_SIZE_FIELD_NUMBER = 3;
        private int batchSize_ = 0;

        /**
         * <code>int32 batch_size = 3;</code>
         *
         * @return The batchSize.
         */
        @Override
        public int getBatchSize() {
            return batchSize_;
        }

        public static final int BATCH_INDEX_FIELD_NUMBER = 4;
        private int batchIndex_ = 0;

        /**
         * <code>int32 batch_index = 4;</code>
         *
         * @return The batchIndex.
         */
        @Override
        public int getBatchIndex() {
            return batchIndex_;
        }

        public static final int BATCH_ID_FIELD_NUMBER = 5;
        private int batchId_ = 0;

        /**
         * <code>int32 batch_id = 5;</code>
         *
         * @return The batchId.
         */
        @Override
        public int getBatchId() {
            return batchId_;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < otpParameters_.size(); i++) {
                output.writeMessage(1, otpParameters_.get(i));
            }
            if (version_ != 0) {
                output.writeInt32(2, version_);
            }
            if (batchSize_ != 0) {
                output.writeInt32(3, batchSize_);
            }
            if (batchIndex_ != 0) {
                output.writeInt32(4, batchIndex_);
            }
            if (batchId_ != 0) {
                output.writeInt32(5, batchId_);
            }
            getUnknownFields().writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < otpParameters_.size(); i++) {
                size += CodedOutputStream
                        .computeMessageSize(1, otpParameters_.get(i));
            }
            if (version_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(2, version_);
            }
            if (batchSize_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(3, batchSize_);
            }
            if (batchIndex_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(4, batchIndex_);
            }
            if (batchId_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(5, batchId_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MigrationPayload)) {
                return super.equals(obj);
            }
            MigrationPayload other = (MigrationPayload) obj;

            if (!getOtpParametersList()
                    .equals(other.getOtpParametersList())) return false;
            if (getVersion()
                    != other.getVersion()) return false;
            if (getBatchSize()
                    != other.getBatchSize()) return false;
            if (getBatchIndex()
                    != other.getBatchIndex()) return false;
            if (getBatchId()
                    != other.getBatchId()) return false;
            if (!getUnknownFields().equals(other.getUnknownFields())) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getOtpParametersCount() > 0) {
                hash = (37 * hash) + OTP_PARAMETERS_FIELD_NUMBER;
                hash = (53 * hash) + getOtpParametersList().hashCode();
            }
            hash = (37 * hash) + VERSION_FIELD_NUMBER;
            hash = (53 * hash) + getVersion();
            hash = (37 * hash) + BATCH_SIZE_FIELD_NUMBER;
            hash = (53 * hash) + getBatchSize();
            hash = (37 * hash) + BATCH_INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getBatchIndex();
            hash = (37 * hash) + BATCH_ID_FIELD_NUMBER;
            hash = (53 * hash) + getBatchId();
            hash = (29 * hash) + getUnknownFields().hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static MigrationPayload parseFrom(
                java.nio.ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static MigrationPayload parseFrom(
                java.nio.ByteBuffer data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static MigrationPayload parseFrom(
                ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static MigrationPayload parseFrom(
                ByteString data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static MigrationPayload parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static MigrationPayload parseFrom(
                byte[] data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static MigrationPayload parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseWithIOException(PARSER, input);
        }

        public static MigrationPayload parseFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static MigrationPayload parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static MigrationPayload parseDelimitedFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static MigrationPayload parseFrom(
                CodedInputStream input)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseWithIOException(PARSER, input);
        }

        public static MigrationPayload parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessage
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MigrationPayload prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code MigrationPayload}
         */
        public static final class Builder extends
                GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MigrationPayload)
                MigrationPayloadOrBuilder {
            public static final Descriptors.Descriptor
            getDescriptor() {
                return GoogleAuth.internal_static_MigrationPayload_descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return GoogleAuth.internal_static_MigrationPayload_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                MigrationPayload.class, Builder.class);
            }

            // Construct using auth.GoogleAuth.MigrationPayload.newBuilder()
            private Builder() {

            }

            private Builder(
                    BuilderParent parent) {
                super(parent);

            }

            @Override
            public Builder clear() {
                super.clear();
                bitField0_ = 0;
                if (otpParametersBuilder_ == null) {
                    otpParameters_ = Collections.emptyList();
                } else {
                    otpParameters_ = null;
                    otpParametersBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                version_ = 0;
                batchSize_ = 0;
                batchIndex_ = 0;
                batchId_ = 0;
                return this;
            }

            @Override
            public Descriptors.Descriptor
            getDescriptorForType() {
                return GoogleAuth.internal_static_MigrationPayload_descriptor;
            }

            @Override
            public MigrationPayload getDefaultInstanceForType() {
                return MigrationPayload.getDefaultInstance();
            }

            @Override
            public MigrationPayload build() {
                MigrationPayload result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public MigrationPayload buildPartial() {
                MigrationPayload result = new MigrationPayload(this);
                buildPartialRepeatedFields(result);
                if (bitField0_ != 0) {
                    buildPartial0(result);
                }
                onBuilt();
                return result;
            }

            private void buildPartialRepeatedFields(MigrationPayload result) {
                if (otpParametersBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) != 0)) {
                        otpParameters_ = Collections.unmodifiableList(otpParameters_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.otpParameters_ = otpParameters_;
                } else {
                    result.otpParameters_ = otpParametersBuilder_.build();
                }
            }

            private void buildPartial0(MigrationPayload result) {
                int from_bitField0_ = bitField0_;
                if (((from_bitField0_ & 0x00000002) != 0)) {
                    result.version_ = version_;
                }
                if (((from_bitField0_ & 0x00000004) != 0)) {
                    result.batchSize_ = batchSize_;
                }
                if (((from_bitField0_ & 0x00000008) != 0)) {
                    result.batchIndex_ = batchIndex_;
                }
                if (((from_bitField0_ & 0x00000010) != 0)) {
                    result.batchId_ = batchId_;
                }
            }

            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof MigrationPayload) {
                    return mergeFrom((MigrationPayload) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(MigrationPayload other) {
                if (other == MigrationPayload.getDefaultInstance()) return this;
                if (otpParametersBuilder_ == null) {
                    if (!other.otpParameters_.isEmpty()) {
                        if (otpParameters_.isEmpty()) {
                            otpParameters_ = other.otpParameters_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureOtpParametersIsMutable();
                            otpParameters_.addAll(other.otpParameters_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.otpParameters_.isEmpty()) {
                        if (otpParametersBuilder_.isEmpty()) {
                            otpParametersBuilder_.dispose();
                            otpParametersBuilder_ = null;
                            otpParameters_ = other.otpParameters_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            otpParametersBuilder_ =
                                    GeneratedMessage.alwaysUseFieldBuilders ?
                                            getOtpParametersFieldBuilder() : null;
                        } else {
                            otpParametersBuilder_.addAllMessages(other.otpParameters_);
                        }
                    }
                }
                if (other.getVersion() != 0) {
                    setVersion(other.getVersion());
                }
                if (other.getBatchSize() != 0) {
                    setBatchSize(other.getBatchSize());
                }
                if (other.getBatchIndex() != 0) {
                    setBatchIndex(other.getBatchIndex());
                }
                if (other.getBatchId() != 0) {
                    setBatchId(other.getBatchId());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                if (extensionRegistry == null) {
                    throw new NullPointerException();
                }
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10: {
                                OtpParameters m =
                                        input.readMessage(
                                                OtpParameters.parser(),
                                                extensionRegistry);
                                if (otpParametersBuilder_ == null) {
                                    ensureOtpParametersIsMutable();
                                    otpParameters_.add(m);
                                } else {
                                    otpParametersBuilder_.addMessage(m);
                                }
                                break;
                            } // case 10
                            case 16: {
                                version_ = input.readInt32();
                                bitField0_ |= 0x00000002;
                                break;
                            } // case 16
                            case 24: {
                                batchSize_ = input.readInt32();
                                bitField0_ |= 0x00000004;
                                break;
                            } // case 24
                            case 32: {
                                batchIndex_ = input.readInt32();
                                bitField0_ |= 0x00000008;
                                break;
                            } // case 32
                            case 40: {
                                batchId_ = input.readInt32();
                                bitField0_ |= 0x00000010;
                                break;
                            } // case 40
                            default: {
                                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                                    done = true; // was an endgroup tag
                                }
                                break;
                            } // default:
                        } // switch (tag)
                    } // while (!done)
                } catch (InvalidProtocolBufferException e) {
                    throw e.unwrapIOException();
                } finally {
                    onChanged();
                } // finally
                return this;
            }

            private int bitField0_;

            private List<OtpParameters> otpParameters_ =
                    Collections.emptyList();

            private void ensureOtpParametersIsMutable() {
                if (!((bitField0_ & 0x00000001) != 0)) {
                    otpParameters_ = new ArrayList<OtpParameters>(otpParameters_);
                    bitField0_ |= 0x00000001;
                }
            }

            private RepeatedFieldBuilder<
                    OtpParameters, OtpParameters.Builder, OtpParametersOrBuilder> otpParametersBuilder_;

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public List<OtpParameters> getOtpParametersList() {
                if (otpParametersBuilder_ == null) {
                    return Collections.unmodifiableList(otpParameters_);
                } else {
                    return otpParametersBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public int getOtpParametersCount() {
                if (otpParametersBuilder_ == null) {
                    return otpParameters_.size();
                } else {
                    return otpParametersBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public OtpParameters getOtpParameters(int index) {
                if (otpParametersBuilder_ == null) {
                    return otpParameters_.get(index);
                } else {
                    return otpParametersBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder setOtpParameters(
                    int index, OtpParameters value) {
                if (otpParametersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOtpParametersIsMutable();
                    otpParameters_.set(index, value);
                    onChanged();
                } else {
                    otpParametersBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder setOtpParameters(
                    int index, OtpParameters.Builder builderForValue) {
                if (otpParametersBuilder_ == null) {
                    ensureOtpParametersIsMutable();
                    otpParameters_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    otpParametersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder addOtpParameters(OtpParameters value) {
                if (otpParametersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOtpParametersIsMutable();
                    otpParameters_.add(value);
                    onChanged();
                } else {
                    otpParametersBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder addOtpParameters(
                    int index, OtpParameters value) {
                if (otpParametersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOtpParametersIsMutable();
                    otpParameters_.add(index, value);
                    onChanged();
                } else {
                    otpParametersBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder addOtpParameters(
                    OtpParameters.Builder builderForValue) {
                if (otpParametersBuilder_ == null) {
                    ensureOtpParametersIsMutable();
                    otpParameters_.add(builderForValue.build());
                    onChanged();
                } else {
                    otpParametersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder addOtpParameters(
                    int index, OtpParameters.Builder builderForValue) {
                if (otpParametersBuilder_ == null) {
                    ensureOtpParametersIsMutable();
                    otpParameters_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    otpParametersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder addAllOtpParameters(
                    Iterable<? extends OtpParameters> values) {
                if (otpParametersBuilder_ == null) {
                    ensureOtpParametersIsMutable();
                    AbstractMessageLite.Builder.addAll(
                            values, otpParameters_);
                    onChanged();
                } else {
                    otpParametersBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder clearOtpParameters() {
                if (otpParametersBuilder_ == null) {
                    otpParameters_ = Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    otpParametersBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public Builder removeOtpParameters(int index) {
                if (otpParametersBuilder_ == null) {
                    ensureOtpParametersIsMutable();
                    otpParameters_.remove(index);
                    onChanged();
                } else {
                    otpParametersBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public OtpParameters.Builder getOtpParametersBuilder(
                    int index) {
                return getOtpParametersFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public OtpParametersOrBuilder getOtpParametersOrBuilder(
                    int index) {
                if (otpParametersBuilder_ == null) {
                    return otpParameters_.get(index);
                } else {
                    return otpParametersBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public List<? extends OtpParametersOrBuilder>
            getOtpParametersOrBuilderList() {
                if (otpParametersBuilder_ != null) {
                    return otpParametersBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(otpParameters_);
                }
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public OtpParameters.Builder addOtpParametersBuilder() {
                return getOtpParametersFieldBuilder().addBuilder(
                        OtpParameters.getDefaultInstance());
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public OtpParameters.Builder addOtpParametersBuilder(
                    int index) {
                return getOtpParametersFieldBuilder().addBuilder(
                        index, OtpParameters.getDefaultInstance());
            }

            /**
             * <code>repeated .MigrationPayload.OtpParameters otp_parameters = 1;</code>
             */
            public List<OtpParameters.Builder>
            getOtpParametersBuilderList() {
                return getOtpParametersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<
                    OtpParameters, OtpParameters.Builder, OtpParametersOrBuilder>
            getOtpParametersFieldBuilder() {
                if (otpParametersBuilder_ == null) {
                    otpParametersBuilder_ = new RepeatedFieldBuilder<
                            OtpParameters, OtpParameters.Builder, OtpParametersOrBuilder>(
                            otpParameters_,
                            ((bitField0_ & 0x00000001) != 0),
                            getParentForChildren(),
                            isClean());
                    otpParameters_ = null;
                }
                return otpParametersBuilder_;
            }

            private int version_;

            /**
             * <code>int32 version = 2;</code>
             *
             * @return The version.
             */
            @Override
            public int getVersion() {
                return version_;
            }

            /**
             * <code>int32 version = 2;</code>
             *
             * @param value The version to set.
             * @return This builder for chaining.
             */
            public Builder setVersion(int value) {

                version_ = value;
                bitField0_ |= 0x00000002;
                onChanged();
                return this;
            }

            /**
             * <code>int32 version = 2;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearVersion() {
                bitField0_ = (bitField0_ & ~0x00000002);
                version_ = 0;
                onChanged();
                return this;
            }

            private int batchSize_;

            /**
             * <code>int32 batch_size = 3;</code>
             *
             * @return The batchSize.
             */
            @Override
            public int getBatchSize() {
                return batchSize_;
            }

            /**
             * <code>int32 batch_size = 3;</code>
             *
             * @param value The batchSize to set.
             * @return This builder for chaining.
             */
            public Builder setBatchSize(int value) {

                batchSize_ = value;
                bitField0_ |= 0x00000004;
                onChanged();
                return this;
            }

            /**
             * <code>int32 batch_size = 3;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearBatchSize() {
                bitField0_ = (bitField0_ & ~0x00000004);
                batchSize_ = 0;
                onChanged();
                return this;
            }

            private int batchIndex_;

            /**
             * <code>int32 batch_index = 4;</code>
             *
             * @return The batchIndex.
             */
            @Override
            public int getBatchIndex() {
                return batchIndex_;
            }

            /**
             * <code>int32 batch_index = 4;</code>
             *
             * @param value The batchIndex to set.
             * @return This builder for chaining.
             */
            public Builder setBatchIndex(int value) {

                batchIndex_ = value;
                bitField0_ |= 0x00000008;
                onChanged();
                return this;
            }

            /**
             * <code>int32 batch_index = 4;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearBatchIndex() {
                bitField0_ = (bitField0_ & ~0x00000008);
                batchIndex_ = 0;
                onChanged();
                return this;
            }

            private int batchId_;

            /**
             * <code>int32 batch_id = 5;</code>
             *
             * @return The batchId.
             */
            @Override
            public int getBatchId() {
                return batchId_;
            }

            /**
             * <code>int32 batch_id = 5;</code>
             *
             * @param value The batchId to set.
             * @return This builder for chaining.
             */
            public Builder setBatchId(int value) {

                batchId_ = value;
                bitField0_ |= 0x00000010;
                onChanged();
                return this;
            }

            /**
             * <code>int32 batch_id = 5;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearBatchId() {
                bitField0_ = (bitField0_ & ~0x00000010);
                batchId_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:MigrationPayload)
        }

        // @@protoc_insertion_point(class_scope:MigrationPayload)
        private static final MigrationPayload DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MigrationPayload();
        }

        public static MigrationPayload getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final Parser<MigrationPayload>
                PARSER = new AbstractParser<MigrationPayload>() {
            @Override
            public MigrationPayload parsePartialFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                Builder builder = newBuilder();
                try {
                    builder.mergeFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(builder.buildPartial());
                } catch (UninitializedMessageException e) {
                    throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
                } catch (java.io.IOException e) {
                    throw new InvalidProtocolBufferException(e)
                            .setUnfinishedMessage(builder.buildPartial());
                }
                return builder.buildPartial();
            }
        };

        public static Parser<MigrationPayload> parser() {
            return PARSER;
        }

        @Override
        public Parser<MigrationPayload> getParserForType() {
            return PARSER;
        }

        @Override
        public MigrationPayload getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final Descriptors.Descriptor
            internal_static_MigrationPayload_descriptor;
    private static final
    GeneratedMessage.FieldAccessorTable
            internal_static_MigrationPayload_fieldAccessorTable;
    private static final Descriptors.Descriptor
            internal_static_MigrationPayload_OtpParameters_descriptor;
    private static final
    GeneratedMessage.FieldAccessorTable
            internal_static_MigrationPayload_OtpParameters_fieldAccessorTable;

    public static Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\021google_auth.proto\"\267\003\n\020MigrationPayload" +
                        "\0227\n\016otp_parameters\030\001 \003(\0132\037.MigrationPayl" +
                        "oad.OtpParameters\022\017\n\007version\030\002 \001(\005\022\022\n\nba" +
                        "tch_size\030\003 \001(\005\022\023\n\013batch_index\030\004 \001(\005\022\020\n\010b" +
                        "atch_id\030\005 \001(\005\032\267\001\n\rOtpParameters\022\016\n\006secre" +
                        "t\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\016\n\006issuer\030\003 \001(\t\022.\n" +
                        "\talgorithm\030\004 \001(\0162\033.MigrationPayload.Algo" +
                        "rithm\022\016\n\006digits\030\005 \001(\005\022\'\n\004type\030\006 \001(\0162\031.Mi" +
                        "grationPayload.OtpType\022\017\n\007counter\030\007 \001(\003\"" +
                        ",\n\tAlgorithm\022\020\n\014ALGO_INVALID\020\000\022\r\n\tALGO_S" +
                        "HA1\020\001\"6\n\007OtpType\022\017\n\013OTP_INVALID\020\000\022\014\n\010OTP" +
                        "_HOTP\020\001\022\014\n\010OTP_TOTP\020\002b\006proto3"
        };
        descriptor = Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new Descriptors.FileDescriptor[]{
                        });
        internal_static_MigrationPayload_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_MigrationPayload_fieldAccessorTable = new
                GeneratedMessage.FieldAccessorTable(
                internal_static_MigrationPayload_descriptor,
                new String[]{"OtpParameters", "Version", "BatchSize", "BatchIndex", "BatchId",});
        internal_static_MigrationPayload_OtpParameters_descriptor =
                internal_static_MigrationPayload_descriptor.getNestedTypes().get(0);
        internal_static_MigrationPayload_OtpParameters_fieldAccessorTable = new
                GeneratedMessage.FieldAccessorTable(
                internal_static_MigrationPayload_OtpParameters_descriptor,
                new String[]{"Secret", "Name", "Issuer", "Algorithm", "Digits", "Type", "Counter",});
        descriptor.resolveAllFeatures();
    }

    // @@protoc_insertion_point(outer_class_scope)
}
